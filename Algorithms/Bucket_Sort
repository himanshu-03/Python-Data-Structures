# The bucket sort algorithm works in a Hash table framework.
# These buckets are formed by uniformly distributing elements.
# Once divided into buckets, sort them using any algorithm. 
# Now, group the sorted buckets back in the right order.

# Example:
# 0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68
# The buckets formed look like this..
#                ____
#               |__\_|
#               |____| -> 0.17 -> 0.12
#               |____| -> 0.26 -> 0.21 -> 0.23
#               |____| -> 0.39
#               |__\_| 
#               |__\_|
#               |____| -> 0.68
#               |____| -> 0.78 -> 0.72
#               |__\_|
#               |____| -> 0.94
#               |__\_|
#               |__\_|

# Sort each bucket and reorder.

# Bucket sort has a consistent time complexity of O(n log n), making it. 
# However, it requires additional memory, which can be a drawback in memory-constrained scenarios.

def Insertion_Sort(array):
    n = len(array)
    for i in range(1,n):
        for j in range(i,0,-1):
            if(array[j] < array[j-1]):
                array[j], array[j-1] = array[j-1], array[j]
            else:
                break
    return array
                

def bucket_sort(array):
    bucket_array = []
    slot_number = 10
    for i in range(slot_number):
        bucket_array.append([])
        
    for j in array:
        index_bucket = int(slot_number*j)
        bucket_array[index_bucket].append(j)
    
    for i in range(slot_number):
        bucket_array[i] = Insertion_Sort(bucket_array[i])
        
    k = 0
    for i in range(slot_number):
        for j in range(len(bucket_array[i])):
            array[k] = bucket_array[i][j]
            k += 1
    
    return array